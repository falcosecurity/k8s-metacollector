syntax = "proto3";

option go_package = "github.com/alacuku/k8s-metadata/metadata";

package metadata;

// Interface exported by the server.
service Metadata {
  // Returns a stream of events for the resources that match the selector.
  rpc Watch(Selector) returns (stream Event) {}
}

// A Selector defines the resource types for which a client wants to receive
// the metadata. For each resource the client can choose to filter them by node.
// Ex. [pod, NodeName] the client will receive only pods that run on the specified node.
// nodeName is used to identify the client.
message Selector {
  string nodeName = 1;
  map<string, string> resourceKinds = 2;
}

// References holds the references to other resources. Ex. an event for a pod
// resource will hold references to deployments/replicasets/services and other
// resources linked to it. Entries are [resourceKind, UID].
message References {
  map<string, ListOfStrings> resources = 1;
}

message ListOfStrings {
  repeated string list = 1;
}

message SpecFields {
  map<string, string> fields = 1;
}

message StatusFields{
  map<string, string> fields = 1;
}

// An Event is received in response to a Watch rpc.
// It contains the metadata for a given resource.
message Event {
  string reason = 1;
  string uid = 2;
  string kind = 3;
  optional string metadata = 4;
  optional string spec = 5;
  optional string status = 6;
  optional References refs = 7;
}
