apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/name: namespace
    app.kubernetes.io/instance: meta-collector
    app.kubernetes.io/component: meta-collector
    app.kubernetes.io/created-by: manifests
  name: meta-collector
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: meta-collector
  namespace: system
  labels:
    app.kubernetes.io/name: deployment
    app.kubernetes.io/instance: meta-collector
    app.kubernetes.io/component: meta-collector
    app.kubernetes.io/created-by: manifests
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: meta-collector
      app.kubernetes.io/component: meta-collector
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        app.kubernetes.io/instance: meta-collector
        app.kubernetes.io/component: meta-collector
    spec:
      securityContext:
        runAsNonRoot: true
      containers:
        - command:
            - /manager
          args:
            - --node-name
            - "$(NODE_NAME)"
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 8080
              name: "metrics"
            - containerPort: 8081
              name: "health-probe"
            - containerPort: 45000
              name: "broker-grpc"
          image: k8s-meta-collector:latest
          name: manager
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "ALL"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 15
          # TODO(user): Configure the resources accordingly based on the project requirements.
          # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
          resources:
            limits:
              cpu: 500m
              memory: 256Mi
            requests:
              cpu: 10m
              memory: 64Mi
      serviceAccountName: meta-collector
      terminationGracePeriodSeconds: 10
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/instance: meta-collector
    app.kubernetes.io/component: meta-collector
    app.kubernetes.io/created-by: manifests
  name: meta-collector
  namespace: meta-collector
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  app.kubernetes.io/name: clusterrole
  app.kubernetes.io/instance: meta-collector
  app.kubernetes.io/component: meta-collector
  app.kubernetes.io/created-by: manifests
  name: meta-collector-role
rules:
  - apiGroups:
      - apps
    resources:
      - daemonsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - replicasets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - replicationcontrollers
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/instance: meta-collector
    app.kubernetes.io/component: meta-collector
    app.kubernetes.io/created-by: manifests
  name: meta-collector-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: meta-collector-role
subjects:
  - kind: ServiceAccount
    name: meta-collector
    namespace: meta-collector
